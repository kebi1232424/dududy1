#include <iostream>
#include <vector>
#include <complex>
#include <cmath>
#include <string>
#include <algorithm>

using namespace std;


using cd = complex<double>;
const double PI = acos(-1);


void fft(vector<cd>& a, bool invert) {
    int n = a.size();
    if (n <= 1)
        return;

    vector<cd> a0(n / 2), a1(n / 2);
    for (int i = 0; 2 * i < n; i++) {
        a0[i] = a[2*i];
        a1[i] = a[2*i+1];
    }
    fft(a0, invert);
    fft(a1, invert);

    double ang = 2 * PI / n * (invert ? -1 : 1);
    cd w(1), wn(cos(ang), sin(ang));
    
    for (int i = 0; 2 * i < n; i++) {
        a[i] = a0[i] + w * a1[i];
        a[i + n/2] = a0[i] - w * a1[i];
        if (invert) {
            a[i] /= 2;
            a[i + n/2] /= 2;
        }
        w *= wn;
    }
}


vector<int> convolve(const vector<int>& a, const vector<int>& b) {
    vector<cd> fa(a.begin(), a.end()), fb(b.begin(), b.end());
    int n = 1;
    while (n < a.size() + b.size()) 
        n <<= 1;
    fa.resize(n);
    fb.resize(n);

    fft(fa, false);
    fft(fb, false);
    for (int i = 0; i < n; i++)
        fa[i] *= fb[i];
    fft(fa, true);

    vector<int> result(n);
    for (int i = 0; i < n; i++)
        result[i] = round(fa[i].real());
    return result;
}


vector<int> findOccurrences(const string& s, const string& p) {
    int n = s.size();
    int m = p.size();
    vector<int> result;
    
    if (m > n) return result;

  
    const int CHAR_COUNT = 26;
    

    vector<int> totalMatches(n + m - 1, 0);

    
    for (int c = 0; c < CHAR_COUNT; c++) {
        char currentChar = 'a' + c;
        
    
        vector<int> sVec(n, 0);
        for (int i = 0; i < n; i++) {
            if (s[i] == currentChar) {
                sVec[i] = 1;
            }
        }
        

        vector<int> pVec(m, 0);
        for (int i = 0; i < m; i++) {
            if (p[i] == currentChar || p[i] == '?') {
                pVec[m - 1 - i] = 1;  // 反转模式串
            }
        }
        

        vector<int> conv = convolve(sVec, pVec);
        
        for (int i = 0; i < n + m - 1; i++) {
            totalMatches[i] += conv[i];
        }
    }
    
  
    for (int i = m - 1; i < n; i++) {
        if (totalMatches[i] == m) {
            result.push_back(i - m + 1);  // 记录匹配的起始位置
        }
    }
    
    return result;
}

int main() {
    string s = "abcabxabcabc";
    string p = "abc?bc";
    
    vector<int> occurrences = findOccurrences(s, p);
    
    cout << "主串: " << s << endl;
    cout << "模式串: " << p << endl;
    cout << "匹配位置: ";
    for (int pos : occurrences) {
        cout << pos << " ";
    }
    cout << endl;
    
    for (int pos : occurrences) {
        cout << "位置 " << pos << ": ";
        for (int i = 0; i < p.size(); i++) {
            cout << s[pos + i];
        }
        cout << endl;
    }
    
    return 0;
}
