第一题
复杂度分析
时间复杂度：
算法中有两层嵌套循环，外层循环遍历矩阵的行（for (int i = 0; i < n; ++i) ），内层循环遍历矩阵的列（for (int j = 0; j < n; ++j) ），所以总的操作次数是 
n×n，时间复杂度为 O(n 2)，其中 n是向量 v 的长度（也对应矩阵的维度）。内层循环里的 index 计算以及取模等操作是常数时间复杂度 O(1)，不影响整体的时间复杂度量级。
空间复杂度：
除了输入的系数数组 a 、向量 v 以及存储结果的向量 result 外，没有额外占用大量空间的数据结构。存储结果的向量 result 长度为 n，所以空间复杂度为 O(n)，其中 n是向量 v 的长度。

第二题
对于每个可能的字符 c，创建主串 S 的特征向量 A，其中 A [i] = 1 如果 S [i] = c，否则为 0
创建模式串 P 的反转特征向量 B，其中 B [j] = 1 如果 P [m-1-j] = c 或 P [m-1-j] = '?'，否则为 0
计算 A 和 B 的卷积，卷积结果中的峰值表示匹配位置
对所有字符的卷积结果求和
如果某个位置的和等于模式串长度 m，则表示该位置完全匹配
通配符 '?' 被特殊处理，它能匹配任何字符
在构建模式串特征向量时，通配符位置对所有字符都设为 1
FFT 计算：FFT 的时间复杂度为 O (n log n)，其中 n 是输入向量的长度
字符循环：需要处理 26 个字母（假设只匹配字母），这是一个常数因子
整体复杂度：算法的总时间复杂度为 O (CHAR_COUNT × (n + m) log (n + m))，由于 CHAR_COUNT 是常数，且 n >> m，因此整体时间复杂度为 O (n log n)
